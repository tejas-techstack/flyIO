// TODO 
//
// right now read requests coming from the client is not handled properly this needs to be fixed
// SEE HOW TO USE SyncRPC


package main

import (
  "encoding/json"
  "context"
  "log"
  "os"
  "sync"

	maelstrom "github.com/jepsen-io/maelstrom/demo/go"
)

func main(){
  n := maelstrom.NewNode()

  // define a nodeState and set it initially to normal
  nodeState := "normal"

  // define a nodeConCount that is intended to track the nodes that are currently connected.
  nodeConCount := 0

  // define the local storage for the node.
  var local_storage []any

  // accept the topology but do nothing with it
  n.Handle("topology", func(msg maelstrom.Message) error {
    return n.Reply(msg, map[string]any{"type":"topology_ok",})
  })

  // accept read request
  n.Handle("read", func(msg maelstrom.Message) error {
  })

  // handle broadcast request and reply with "broadcast_ok"
  n.Handle("broadcast", func(msg maelstrom.Message) error {
  })

    // Run the node
  if err := n.Run(); err != nil{
      log.Fatal(err)
      os.Exit(1)
  }
}

